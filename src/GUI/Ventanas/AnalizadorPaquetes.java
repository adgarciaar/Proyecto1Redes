/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.Ventanas;

import CapturaPaquetes.PacketContents;
import CapturaPaquetes.jpcap_thread;
import java.io.IOException;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import jpcap.JpcapCaptor;
import jpcap.NetworkInterface;

/**
 *
 * @author adrian
 */
public class AnalizadorPaquetes extends javax.swing.JFrame {

    public static NetworkInterface[] listaInterfaces;
    public static JpcapCaptor capturador;
    jpcap_thread hilo;
    public static int indiceInterface;    
    boolean estadoCaptura;
    public static int numeroPaquete;
    private final JFrame ventanaInicio;
    public static double tiempoInicio;
    
    //public static List<Packet> packetList;

    /**
     * Creates new form AnalizadorMensajes
     *
     * @param ventanaInicio
     */
    public AnalizadorPaquetes(JFrame ventanaInicio) {
        initComponents();

        //writer = null;
        //packetList = new ArrayList<>();
        indiceInterface = 1; //interface               
        estadoCaptura = false;
        numeroPaquete = 1;
        listaInterfaces = JpcapCaptor.getDeviceList();

        this.ventanaInicio = ventanaInicio;
        listaInterfaces = JpcapCaptor.getDeviceList();
        int numeroDispositivo = -1;
        for (NetworkInterface dispositivo : listaInterfaces) {
            numeroDispositivo += 1;
            this.jComboBoxInterfaces.addItem(numeroDispositivo + ". " + dispositivo.name
                    + dispositivo.description + "-" + dispositivo.datalink_name + 
                    "-" + dispositivo.datalink_description);
        }
    }

    public void CapturePackets() {

        hilo = new jpcap_thread() {

            @Override
            public Object construct() {
                try {
                    capturador = JpcapCaptor.openDevice(listaInterfaces[indiceInterface], 65535, false, 1000);
                    tiempoInicio = (double)System.currentTimeMillis();      
                    
                    while (estadoCaptura) {
                        capturador.processPacket(1, new PacketContents());
                        //packetList.add(CAP.getPacket());                       
                    }
                    capturador.close();

                } catch (IOException e) {
                    System.out.print(e);
                }
                return 0;
            }

            @Override
            public void finished() {
                this.interrupt();
            }
        };

        hilo.start();

    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButtonCapturar = new javax.swing.JButton();
        jButtonDetener = new javax.swing.JButton();
        jComboBoxInterfaces = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jButtonRegresar = new javax.swing.JButton();
        jButtonSalir = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaDetalles = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTablePaquetes = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Captura de mensajes");

        jButtonCapturar.setText("Empezar captura");
        jButtonCapturar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCapturarActionPerformed(evt);
            }
        });

        jButtonDetener.setText("Detener captura");
        jButtonDetener.setEnabled(false);
        jButtonDetener.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDetenerActionPerformed(evt);
            }
        });

        jLabel2.setText("Interfaces:");

        jButtonRegresar.setText("Regresar");
        jButtonRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegresarActionPerformed(evt);
            }
        });

        jButtonSalir.setText("Salir");
        jButtonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalirActionPerformed(evt);
            }
        });

        jTextAreaDetalles.setColumns(20);
        jTextAreaDetalles.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextAreaDetalles.setRows(5);
        jTextAreaDetalles.setEnabled(false);
        jScrollPane2.setViewportView(jTextAreaDetalles);

        jTablePaquetes.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTablePaquetes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NÃºmero", "Tiempo (s)", "Fuente", "Destino", "Protocolo", "Longitud (bytes)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTablePaquetes.setRowHeight(20);
        jTablePaquetes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablePaquetesMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTablePaquetes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonRegresar)
                .addGap(195, 195, 195)
                .addComponent(jButtonSalir)
                .addGap(415, 415, 415))
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBoxInterfaces, javax.swing.GroupLayout.PREFERRED_SIZE, 594, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonCapturar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonDetener, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3))
                            .addComponent(jLabel1))))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCapturar)
                    .addComponent(jComboBoxInterfaces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jButtonDetener))
                .addGap(23, 23, 23)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRegresar)
                    .addComponent(jButtonSalir))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCapturarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCapturarActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTablePaquetes.getModel();
        model.setRowCount(0);
        numeroPaquete = 1;
        //PacketContents.rowList.clear();
        jTextAreaDetalles.setText("");
        //packetList.clear();

        jButtonCapturar.setEnabled(false);
        jButtonDetener.setEnabled(true);
        jComboBoxInterfaces.setEnabled(false);

        String datosInterface = (String) jComboBoxInterfaces.getSelectedItem();
        int pointIndex = datosInterface.indexOf(".");
        int idInterface = Integer.parseInt(datosInterface.substring(0, pointIndex));
        //System.out.println(idInterface);      

        indiceInterface = idInterface;

        estadoCaptura = true;
        CapturePackets();
    }//GEN-LAST:event_jButtonCapturarActionPerformed

    private void jButtonDetenerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDetenerActionPerformed
        estadoCaptura = false;
        hilo.finished();
        jButtonCapturar.setEnabled(true);
        jButtonDetener.setEnabled(false);
        jComboBoxInterfaces.setEnabled(true);
    }//GEN-LAST:event_jButtonDetenerActionPerformed

    private void jButtonRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegresarActionPerformed
        this.dispose();
        this.ventanaInicio.setVisible(true);
    }//GEN-LAST:event_jButtonRegresarActionPerformed

    private void jButtonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButtonSalirActionPerformed

    private void jTablePaquetesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePaquetesMouseClicked
        jTextAreaDetalles.setText("");
        Object obj = jTablePaquetes.getModel().getValueAt(jTablePaquetes.getSelectedRow(), 0);
        int nPaquete = (int) obj;
        nPaquete -= 1;
        
        //extracciÃ³n de los datos del paquete Ethernet
        String macFuente = PacketContents.listaEthernet.get(nPaquete).getSourceAddress();        
        String macDestino = PacketContents.listaEthernet.get(nPaquete).getDestinationAddress();   
        
        String infoCompletaEthernet = PacketContents.listaEthernet.get(nPaquete).toString();
        int indicePrimerParentesis = infoCompletaEthernet.indexOf('('); 
        int indiceUltimoParentesis = infoCompletaEthernet.indexOf(')'); 
        int ethernetType= Integer.parseInt(infoCompletaEthernet.substring(indicePrimerParentesis+1, indiceUltimoParentesis));
        String tipoEthernet = "";
        
        //String hex = Integer.toHexString(ethernetType);        
        //System.out.println(hex);
        
        switch (ethernetType) {
            case 2048:  
                tipoEthernet = "IP (0x0800)";
                break;
            case 512:
                tipoEthernet = "PUP (0x0200)";
                break;
            case 2054:
                tipoEthernet = "ARP (0x0806)";
                break;
            case 32821:
                tipoEthernet = "RARP (ARP reverso) (0x8035)";
                break;
            case 33024:
                tipoEthernet = "IEEE 802.1Q VLAN (0x8100)";
                break;
            case 34525:
                tipoEthernet = "IPv6 (0x86dd)";
                break;
            case 36864:
                tipoEthernet = "Loop (0x9000)";
                break;                
        }
        
        if (PacketContents.listaAtributosPaquetes.get(nPaquete)[4] == "TCP") {
            
            byte[] byteDataTCP = (byte[]) PacketContents.listaAtributosPaquetes.get(nPaquete)[9]; 
            String stringDataTCP = new String(byteDataTCP);   
            
            jTextAreaDetalles.setText("Packet No: " + (nPaquete+1)
                    + "\n\tSeq No: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[10]
                    + "\n\tProtocol: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[4]
                    + " (" +PacketContents.listaAtributosPaquetes.get(nPaquete)[13]+")"
                    + "\n\tSource IP: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[2]
                    + "\n\tDist IP: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[3]
                    + "\n\tLength: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[1]
                    + "\n\tSource Port: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[5]
                    + "\n\tDist Port: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[6]
                    + "\n\tAck: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[7]
                    + "\n\tAck No: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[8]
                    + "\n\tSequence No: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[10]
                    //+ "\nOffset: " + PacketContents.rowList.get((int) obj)[11]
                    + "\n\tHeader: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[12]                                   
                    + "\n\tData: " + stringDataTCP
                    //informaciÃ³n Ethernet
                    +"\nEthernet"
                    +"\n\tProtocolo: "+tipoEthernet
                    +"\n\tFuente: " + macFuente
                    +"\n\tDestino: " + macDestino
            );

        } else if (PacketContents.listaAtributosPaquetes.get(nPaquete)[4] == "UDP") {
            
            byte[] byteDataUDP = (byte[]) PacketContents.listaAtributosPaquetes.get(nPaquete)[7]; 
            String stringDataUDP = new String(byteDataUDP);
            
            jTextAreaDetalles.setText("Packet No: " + (nPaquete+1)
                    + "\n\tProtocol:" + PacketContents.listaAtributosPaquetes.get(nPaquete)[4]
                    + " (" +PacketContents.listaAtributosPaquetes.get(nPaquete)[10]+")"
                    + "\n\tSource IP: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[2]
                    + "\n\tDist IP: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[3]
                    + "\n\tLength: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[1]
                    + "\n\tSource Port: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[5]
                    + "\n\tDist Port: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[6]
                    + "\n\tOffset: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[8]
                    + "\n\tHeader: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[9]
                    + "\n\tData: " + stringDataUDP
                    //informaciÃ³n Ethernet
                    +"\nEthernet"
                    +"\n\tProtocolo: "+tipoEthernet
                    +"\n\tFuente: " + macFuente
                    +"\n\tDestino: " + macDestino
            );

        } else if (PacketContents.listaAtributosPaquetes.get(nPaquete)[4] == "ICMP") {
            
            byte[] byteDataICMP = (byte[]) PacketContents.listaAtributosPaquetes.get(nPaquete)[11]; 
            short shortChecksum = (short) PacketContents.listaAtributosPaquetes.get(nPaquete)[5];
            
            String intHexString = Integer.toHexString(shortChecksum);
            String shortHexString = "0x"+intHexString.substring(4);
            String stringDataICMP = new String(byteDataICMP);
            
            jTextAreaDetalles.setText("Packet No: " + (nPaquete+1)
                    + "\n\tProtocol:" + PacketContents.listaAtributosPaquetes.get(nPaquete)[4]
                    + " (" +PacketContents.listaAtributosPaquetes.get(nPaquete)[12]+")" 
                    + "\n\tSource IP: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[2]
                    + "\n\tDist IP: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[3]
                    + "\n\tLength: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[1]
                    + "\n\tChecksum: " + shortHexString
                    + "\n\tHeader: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[6]
                    + "\n\tOffset: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[7]
                    + "\n\tOriginate TimeStamp: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[8] + "bits"
                    + "\n\tRecieve TimeStamp: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[9] + "bits"
                    + "\n\tTransmit TimeStamp: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[10] + "bits"
                    + "\n\tData: " + stringDataICMP
                    //informaciÃ³n Ethernet
                    +"\nEthernet"
                    +"\n\tProtocolo: "+tipoEthernet
                    +"\n\tFuente: " + macFuente
                    +"\n\tDestino: " + macDestino
            );
           
        } else if (PacketContents.listaAtributosPaquetes.get(nPaquete)[6] == "ARP") {     
            
            byte[] byteDataARP = (byte[]) PacketContents.listaAtributosPaquetes.get(nPaquete)[8]; 
            String stringDataARP = new String(byteDataARP);
            
            String tipoARP = (String) PacketContents.listaAtributosPaquetes.get(nPaquete)[9];            
            int firstIndex = tipoARP.indexOf("REQUEST");
            String tipo="";
            if(firstIndex==-1){
                tipo="REPLY";
            }else{
                tipo="REQUEST";
            }
            
            jTextAreaDetalles.setText("Packet No: " + (nPaquete+1)
                    + "\n\tProtocol:" + PacketContents.listaAtributosPaquetes.get(nPaquete)[6]  
                    + "\n\tTipo: " + tipo
                    + "\n\tSource hardware: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[2]
                    + "\n\tProtocolo fuente: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[3]
                    + "\n\tDist hardware: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[4]
                    + "\n\tProtocolo destino: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[5]
                    + "\n\tLength: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[1]
                    //+ "\n\tChecksum: " + PacketContents.rowList.get(nPaquete)[5]
                    + "\n\tHeader: " + PacketContents.listaAtributosPaquetes.get(nPaquete)[7]
                    //+ "\n\tOffset: " + PacketContents.rowList.get(nPaquete)[7]
                    //+ "\n\tOriginate TimeStamp: " + PacketContents.rowList.get(nPaquete)[8] + "bits"
                    //+ "\n\tRecieve TimeStamp: " + PacketContents.rowList.get(nPaquete)[9] + "bits"
                    //+ "\n\tTransmit TimeStamp: " + PacketContents.rowList.get(nPaquete)[10] + "bits"
                    + "\n\tData: " + stringDataARP
                    //informaciÃ³n Ethernet
                    +"\nEthernet"
                    +"\n\tProtocolo: "+tipoEthernet
                    +"\n\tFuente: " + macFuente
                    +"\n\tDestino: " + macDestino
            );
        }
        
    }//GEN-LAST:event_jTablePaquetesMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCapturar;
    private javax.swing.JButton jButtonDetener;
    private javax.swing.JButton jButtonRegresar;
    private javax.swing.JButton jButtonSalir;
    private javax.swing.JComboBox<String> jComboBoxInterfaces;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    public static javax.swing.JTable jTablePaquetes;
    private javax.swing.JTextArea jTextAreaDetalles;
    // End of variables declaration//GEN-END:variables
}
